{"version":3,"sources":["store/tasks/types.js","store/tasks/reducers.js","helpers/mapper.js","store/tasks/actions.js","store/tasks/index.js","store/tasksManagement/types.js","store/tasksManagement/reducers.js","store/tasksManagement/actions.js","store/tasksManagement/index.js","store/modes/types.js","store/modes/reducers.js","store/modes/actions.js","store/modes/index.js","reducers.js","mainStore.js","components/PageMenu.js","components/ItemCheckbox.js","components/ItemData.js","components/PopupShowTask.js","components/OnceTask.js","components/ListTasksEmpty.js","components/PageContent.js","components/PopupAddTask.js","components/Page.js","serviceWorker.js","index.js"],"names":["initTasks","tasks","ls","get","map","task","id","content","done","create","Date","mapper","type","types","tasksReducer","state","action","nanoid","set","arrayId","Array","isArray","includes","filter","INIT_TASKS_MANAGEMENT","tasksManagementReducer","INIT_MODES","add","edit","show","modesReducer","mainReducer","combineReducers","tasksManagement","modes","store","createStore","mainReducers","composeWithDevTools","Navbar","styled","div","displayName","Button","button","props","single","ButtonGroup","connect","dispatch","removeTasks","tasksActions","doneTasks","setEditingMode","modesActions","setAddingMode","resetModes","resetTasksManagement","tasksManagementActions","length","onClick","some","CheckboxAlias","isClick","Label","label","Checkbox","input","attrs","toggleTasksManagement","ItemButton","ItemContent","p","ItemTime","ItemData","showTaskEvent","openModalEvent","format","PopupContainer","PopupTitle","h2","PopupTime","PopupDone","PopupContent","PopupControl","cancle","PopupAddTask","closePopup","closeModalEvent","doneTaskAndClosePopup","doneTask","removeTaskAndClosePopup","setTimeout","removeTask","this","visible","isOpen","onClose","showCloseButton","closeMaskOnClick","customStyles","width","maxWidth","height","borderRadius","padding","customMaskStyles","backgroundColor","Component","list","ListItem","li","ItemWrapper","ItemDone","OnceTask","changeOpenModal","setState","prevState","openModal","setShowingMode","PopupShowTask","ListEmpty","Message","QuotationWrapper","Quotation","q","messageText","quotationTexts","quotation","author","ListTasksEmpty","randomIndexMessage","Math","floor","random","randomIndexQuotation","MainContent","List","ul","sort","a","b","PopupFieldText","textarea","changeValue","e","valueTextarea","target","value","resetValue","createTask","preventDefault","trim","addTask","htmlFor","onChange","placeholder","PageWrapper","PageTitle","h1","Page","PageContent","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"oMAIe,EAJE,WAIF,EAHG,YAGH,EAFK,c,yBCGdA,EAAY,WACd,IAAIC,EAAQC,IAAGC,IAAI,UAAY,GAG/B,OAFAF,EAAQA,EAAMG,KAAI,SAAAC,GAAI,OCPJ,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,GAAIC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACxC,MAAO,CACHH,KACAC,UACAC,OACAC,OAAQ,IAAIC,KAAKD,IDEKE,CAAON,OEOtB,EAZC,SAAAE,GAAO,MAAK,CACxBK,KAAMC,EAAgBN,YAWX,EARE,SAAAD,GAAE,MAAK,CACpBM,KAAMC,EAAiBP,OAOZ,EAJI,SAAAA,GAAE,MAAK,CACtBM,KAAMC,EAAmBP,OCPdQ,EHQM,WAAkC,IAAjCC,EAAgC,uDAAxBf,IAAagB,EAAW,uCAClD,OAAQA,EAAOJ,MACX,KAAKC,EACD,IAAMZ,EAAK,sBAAOc,GAAP,CAAc,CACrBT,GAAIW,cACJV,QAASS,EAAOT,QAChBC,MAAM,EACNC,OAAQ,IAAIC,QAIhB,OADAR,IAAGgB,IAAI,QAASjB,GACTA,EAGX,KAAKY,EACD,IAAMM,EAAUC,MAAMC,QAAQL,EAAOV,IAAMU,EAAOV,GAAK,CAACU,EAAOV,IAEzDL,EAAQc,EAAMX,KAAI,SAAAC,GAIpB,OAHIc,EAAQG,SAASjB,EAAKC,MAAqB,IAAdD,EAAKG,OAClCH,EAAKG,MAAO,GAETH,KAIX,OADAH,IAAGgB,IAAI,QAASjB,GACTA,EAGX,KAAKY,EACD,IAAMM,EAAUC,MAAMC,QAAQL,EAAOV,IAAMU,EAAOV,GAAK,CAACU,EAAOV,IACzDL,EAAQc,EAAMQ,QAAO,SAAAlB,GAAI,OAAKc,EAAQG,SAASjB,EAAKC,OAG1D,OADAJ,IAAGgB,IAAI,QAASjB,GACTA,EAGX,QACI,OAAOc,II9CJ,EAHiB,0BAGjB,EAFgB,yBCCzBS,EAAwB,GCQf,EARe,SAAClB,GAAD,MAAS,CACnCM,KAAMC,EAA+BP,OAO1B,EAJc,iBAAO,CAChCM,KAAMC,ICHKY,EFAgB,WAA4C,IAA3CV,EAA0C,uDAAlCS,EAAuBR,EAAW,uCACtE,OAAQA,EAAOJ,MACX,KAAKC,EACD,OAAIE,EAAMO,SAASN,EAAOV,IACfS,EAAMQ,QAAO,SAAAjB,GAAE,OAAIA,IAAOU,EAAOV,MAGtC,GAAN,mBACOS,GADP,CAEIC,EAAOV,KAIf,KAAKO,EACD,OAAOW,EAEX,QACI,OAAOT,IGhBJ,EALE,WAKF,EAJG,YAIH,EAHG,YAGH,EAFI,aCDbW,EAAa,CACfC,KAAK,EACLC,MAAM,EACNC,MAAM,GCaK,EAhBO,iBAAO,CACzBjB,KAAMC,IAeK,EAZQ,iBAAO,CAC1BD,KAAMC,IAWK,EARQ,iBAAO,CAC1BD,KAAMC,IAOK,EAJI,iBAAO,CACtBD,KAAMC,ICXKiB,EFIM,WAAiC,IAAhCf,EAA+B,uDAAvBW,EAAYV,EAAW,uCACjD,OAAQA,EAAOJ,MACX,KAAKC,EACD,MAAO,CACHc,KAAK,EACLC,MAAM,EACNC,MAAM,GAGd,KAAKhB,EACD,MAAO,CACHc,KAAK,EACLC,MAAM,EACNC,MAAM,GAGd,KAAKhB,EACD,MAAO,CACHc,KAAK,EACLC,MAAM,EACNC,MAAM,GAGd,KAAKhB,EACD,OAAOa,EAEX,QACI,OAAOX,IGxBJgB,EANKC,0BAAgB,CAChC/B,MAAOa,EACPmB,gBAAiBR,EACjBS,MAAOJ,ICFIK,EAFDC,sBAAYC,EAAcC,iC,qBCElCC,EAASC,IAAOC,IAAV,4OAYZF,EAAOG,YAAc,SAErB,IAAMC,EAASH,IAAOI,OAAV,+MASN,SAAAC,GAAK,OAAIA,EAAMC,QAAU,uBAG/BH,EAAOD,YAAc,SAErB,IAAMK,EAAcP,IAAOC,IAAV,kGA4CjB,I,MAeeO,eAfS,SAACjC,GAAD,MAAY,CAChCd,MAAOc,EAAMd,MACbgC,gBAAiBlB,EAAMkB,gBACvBC,MAAOnB,EAAMmB,UAGU,SAACe,GAAD,MAAe,CACtCC,YAAa,SAAC5C,GAAD,OAAQ2C,EAASE,EAAwB7C,KACtD8C,UAAW,SAAC9C,GAAD,OAAQ2C,EAASE,EAAsB7C,KAClD+C,eAAgB,kBAAMJ,EAASK,MAC/BC,cAAe,kBAAMN,EAASK,MAC9BE,WAAY,kBAAMP,EAASK,MAC3BG,qBAAsB,kBAAMR,EAASS,SAG1BV,EArDf,YAUI,IATA/C,EASD,EATCA,MACAmD,EAQD,EARCA,UACAF,EAOD,EAPCA,YACAjB,EAMD,EANCA,gBACAC,EAKD,EALCA,MACAmB,EAID,EAJCA,eACAE,EAGD,EAHCA,cACAC,EAED,EAFCA,WACAC,EACD,EADCA,qBAEA,OACI,eAAClB,EAAD,WACKtC,EAAM0D,OAAS,IAAMzB,EAAMN,KACxB,cAACe,EAAD,CAAQiB,QAAS,WAAQJ,IAAcC,KAAvC,oBACA,cAACd,EAAD,CAAQiB,QAASP,EAAjB,6BACHnB,EAAMN,KACH,eAACmB,EAAD,WACK9C,EAAM4D,MAAK,SAAAxD,GAAI,OAAI4B,EAAgBX,SAASjB,EAAKC,MAAQD,EAAKG,SAC3D,cAACmC,EAAD,CAAQiB,QAAS,WACbR,EAAUnB,GACVuB,IACAC,KAHJ,qBAMHxB,EAAgB0B,OAAS,GACtB,cAAChB,EAAD,CAAQiB,QAAS,WACbV,EAAYjB,GACZuB,IACAC,KAHJ,0BAOR,cAACd,EAAD,CAAQG,OAAyB,IAAjB7C,EAAM0D,OAAcC,QAASL,EAA7C,yB,qCCrEVO,GAAgBtB,IAAOC,IAAV,yhBAKC,SAAAI,GAAK,OAAIA,EAAMkB,QAAU,UAAY,eAUtC,SAAAlB,GAAK,OAAIA,EAAMkB,QAAU,QAAU,UAYtDD,GAAcpB,YAAc,gBAE5B,IAAMsB,GAAQxB,IAAOyB,MAAV,mLASXD,GAAMtB,YAAc,QAEpB,IAAMwB,GAAW1B,IAAO2B,MAAMC,MAAM,CAChCxD,KAAM,YADO4B,CAAH,mIAMEsB,IAKhBI,GAASxB,YAAc,WAavB,I,SAQeM,gBARS,SAACjC,GAAD,MAAY,CAChCkB,gBAAiBlB,EAAMkB,oBAGA,SAACgB,GAAD,MAAe,CACtCoB,sBAAuB,SAAC/D,GAAD,OAAQ2C,EAASS,EAA6CpD,QAG1E0C,EAnBf,YAAyE,IAAjD3C,EAAgD,EAAhDA,KAAM4B,EAA0C,EAA1CA,gBAAiBoC,EAAyB,EAAzBA,sBACrCN,EAAU9B,EAAgB4B,MAAK,SAAAvD,GAAE,OAAIA,IAAOD,EAAKC,MAEvD,OACI,eAAC0D,GAAD,WACI,cAACE,GAAD,CAAUN,QAAS,WAAQS,EAAsBhE,EAAKC,OACtD,cAACwD,GAAD,CAAeC,QAASA,U,oBC5D9BO,GAAa9B,IAAOI,OAAV,0KAShB0B,GAAW5B,YAAc,aAEzB,IAAM6B,GAAc/B,IAAOgC,EAAV,oDAIjBD,GAAY7B,YAAc,cAE1B,IAAM+B,GAAWjC,IAAOgC,EAAV,kGAMdC,GAAS/B,YAAc,WAaRgC,I,8BAAAA,GAXf,YAA4D,IAAxCrE,EAAuC,EAAvCA,KAAMsE,EAAiC,EAAjCA,cAAeC,EAAkB,EAAlBA,eACrC,OACI,eAACN,GAAD,CAAYV,QAAS,WAAQgB,IAAkBD,KAA/C,UACI,cAACF,GAAD,UACI,cAAC,KAAD,CAAQI,OAAO,mBAAf,SAAmCxE,EAAKI,WAE5C,cAAC8D,GAAD,UAAclE,EAAKE,c,SCzBzBuE,I,MAAiBtC,IAAOC,IAAV,8KAQdsC,GAAavC,IAAOwC,GAAV,uHAMVC,GAAYzC,IAAOgC,EAAV,iGAMTU,GAAY1C,IAAOC,IAAV,iWAiBT0C,GAAe3C,IAAOC,IAAV,2HAOZ2C,GAAe5C,IAAOC,IAAV,8GAEW,SAAAI,GAAK,OAAIA,EAAMrC,KAAO,iBAAmB,oBAIhEmC,GAASH,IAAOI,OAAV,uRAOY,SAAAC,GAAK,OAAIA,EAAMwC,OAAS,UAAYxC,EAAMrC,KAAO,UAAY,aAChE,SAAAqC,GAAK,OAAIA,EAAMwC,OAAS,aAAexC,EAAMrC,KAAO,IAAM,gBAInD,SAAAqC,GAAK,OAAIA,EAAMwC,OAAS,UAAYxC,EAAMrC,KAAO,UAAY,aAInF8E,G,4MACFC,WAAa,WACT,EAAK1C,MAAM2C,kBACX,EAAK3C,MAAMW,c,EAGfiC,sBAAwB,WACpB,EAAKF,aACL,EAAK1C,MAAM6C,SAAS,EAAK7C,MAAMxC,KAAKC,K,EAGxCqF,wBAA0B,WACtB,EAAKJ,aAELK,YAAW,WACP,EAAK/C,MAAMgD,WAAW,EAAKhD,MAAMxC,KAAKC,MACvC,M,4CAIP,WACI,IAAQD,EAASyF,KAAKjD,MAAdxC,KACR,OACI,cAAC,KAAD,CACI0F,QAASD,KAAKjD,MAAMmD,SAAU,EAC9BC,QAASH,KAAKP,WACdW,iBAAiB,EACjBC,kBAAkB,EAClBC,aAAc,CACVC,MAAO,OACPC,SAAU,QACVC,OAAQ,OACRC,aAAc,OACdC,QAAS,QAEbC,iBAAkB,CACdC,gBAAiB,sBAbzB,SAgBI,eAAC7B,GAAD,WACI,cAACC,GAAD,sBACC1E,EAAKG,MAAQ,cAAC0E,GAAD,IACd,cAACD,GAAD,UACI,cAAC,KAAD,CAAQJ,OAAO,mBAAf,SAAmCxE,EAAKI,WAE5C,cAAC0E,GAAD,UAAe9E,EAAKE,UACpB,eAAC6E,GAAD,CAAc5E,KAAMH,EAAKG,KAAzB,UACI,cAAC,GAAD,CAAQ6E,QAAM,EAACzB,QAASkC,KAAKP,WAA7B,qBACElF,EAAKG,MAAQ,cAAC,GAAD,CAAQA,MAAI,EAACoD,QAASkC,KAAKL,sBAA3B,qBACf,cAAC,GAAD,CAAQ7B,QAASkC,KAAKH,wBAAtB,mC,GAjDGiB,cAoEZ5D,gBAVS,SAACjC,GAAD,MAAY,CAChCmB,MAAOnB,EAAMmB,MAAM2E,SAGI,SAAC5D,GAAD,MAAe,CACtCyC,SAAU,SAACpF,GAAD,OAAQ2C,EAASE,EAAsB7C,KACjDuF,WAAY,SAACvF,GAAD,OAAQ2C,EAASE,EAAwB7C,KACrDkD,WAAY,kBAAMP,EAASK,SAGhBN,CAA6CsC,ICrItDwB,GAAWtE,IAAOuE,GAAV,yKAQdD,GAASpE,YAAc,WAEvB,IAAMsE,GAAcxE,IAAOC,IAAV,4MAMJ,SAAAI,GAAK,OAAIA,EAAMrC,KAAQqC,EAAMjB,KAA4B,oBAArB,mBAA2C,uBAC3E,SAAAiB,GAAK,OAAKA,EAAMjB,KAA6B,gBAAtB,uBAGxCoF,GAAYtE,YAAc,cAE1B,IAAMuE,GAAWzE,IAAOC,IAAV,sWAiBdwE,GAASvE,YAAc,W,gBAEjBwE,G,kDACF,WAAYrE,GAAQ,IAAD,8BACf,cAAMA,IAMVsE,gBAAkB,WACd,EAAKtE,MAAMY,uBACX,EAAK2D,UAAS,SAAAC,GAAS,MAAK,CACxBC,WAAYD,EAAUC,eAR1B,EAAKvG,MAAQ,CACTuG,WAAW,GAHA,E,0CAcnB,WACI,IAAQH,EAAkCrB,KAAlCqB,gBAAiBtE,EAAiBiD,KAAjBjD,MAAO9B,EAAU+E,KAAV/E,MACxBV,EAAgCwC,EAAhCxC,KAAM6B,EAA0BW,EAA1BX,MAAOqF,EAAmB1E,EAAnB0E,eACbD,EAAcvG,EAAduG,UAER,OACI,eAACR,GAAD,WACI,eAACE,GAAD,CAAapF,KAAMM,EAAMN,KAAMpB,KAAMH,EAAKG,KAA1C,UACI,cAAC,GAAD,CAAcH,KAAMA,IACpB,cAAC,GAAD,CAAUuE,eAAgBuC,EAAiBxC,cAAe4C,EAAgBlH,KAAMA,OAEnFA,EAAKG,MAAQ,cAACyG,GAAD,IAEd,cAACO,GAAD,CAAehC,gBAAiB2B,EAAiBnB,OAAQsB,EAAWjH,KAAMA,W,GA5BnEuG,cA2CR5D,gBATS,SAACjC,GAAD,MAAY,CAChCmB,MAAOnB,EAAMmB,UAGU,SAACe,GAAD,MAAe,CACtCsE,eAAgB,kBAAMtE,EAASK,MAC/BG,qBAAsB,kBAAMR,EAASS,SAG1BV,CAA6CkE,IC5FtDO,GAAYjF,IAAOC,IAAV,8KASfgF,GAAU/E,YAAc,YAExB,IAAMgF,GAAUlF,IAAOgC,EAAV,uDAIbkD,GAAQhF,YAAc,UAEtB,IAAMiF,GAAmBnF,IAAOgC,EAAV,wDAItBmD,GAAiBjF,YAAc,mBAE/B,IAAMkF,GAAYpF,IAAOqF,EAAV,8EAKfD,GAAUlF,YAAc,YAExB,IAAMoF,GAAc,CAChB,gCACA,qCAGEC,GAAiB,CACnB,CACIC,UAAW,kLACXC,OAAQ,iBAEZ,CACID,UAAW,qGACXC,OAAQ,kBAEZ,CACID,UAAW,sHACXC,OAAQ,cAEZ,CACID,UAAW,sYACXC,OAAQ,qBAEZ,CACID,UAAW,iEACXC,OAAQ,sBAEZ,CACID,UAAW,4FACXC,OAAQ,eAEZ,CACID,UAAW,yLACXC,OAAQ,YAEZ,CACID,UAAW,gNACXC,OAAQ,eAEZ,CACID,UAAW,sGACXC,OAAQ,cAEZ,CACID,UAAW,kHACXC,OAAQ,kBAoBDC,I,MAAAA,GAhBf,WACI,IAAMC,EAAqBC,KAAKC,MAAMD,KAAKE,SAAWR,GAAYnE,QAC5D4E,EAAuBH,KAAKC,MAAMD,KAAKE,SAAWP,GAAepE,QAEvE,OACI,eAAC8D,GAAD,WACI,cAACC,GAAD,UAAUI,GAAYK,KACtB,eAACR,GAAD,WACI,cAACC,GAAD,UAAYG,GAAeQ,GAAsBP,YAChD,MACD,+BAAOD,GAAeQ,GAAsBN,gBCpFtDO,GAAchG,IAAOC,IAAV,4HAOjB+F,GAAY9F,YAAc,cAE1B,IAAM+F,GAAOjG,IAAOkG,GAAV,uEAKVD,GAAK/F,YAAc,OAYnB,I,qBAMeM,gBANS,SAACjC,GACrB,MAAO,CACHd,MAAOc,EAAMd,MAAM0I,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEnI,OAASoI,EAAEpI,aAIf,GAAzBuC,EAhBf,YAA6B,IAAV/C,EAAS,EAATA,MACf,OACI,cAACuI,GAAD,UACKvI,EAAM0D,OAAS,EACV,cAAC8E,GAAD,UAAOxI,EAAMG,KAAI,SAAAC,GAAI,OAAI,cAAC,GAAD,CAAUA,KAAMA,GAAWA,EAAKC,SACzD,cAAC,GAAD,SCnBZwE,GAAiBtC,IAAOC,IAAV,+IAOdsC,GAAavC,IAAOwC,GAAV,uHAMV8D,GAAiBtG,IAAOuG,SAAV,qKASd3D,GAAe5C,IAAOC,IAAV,kHAMZE,GAASH,IAAOI,OAAV,qRAOY,SAAAC,GAAK,OAAIA,EAAMwC,OAAS,UAAY,aACvC,SAAAxC,GAAK,OAAIA,EAAMwC,OAAS,aAAe,gBAIhC,SAAAxC,GAAK,OAAIA,EAAMwC,OAAS,UAAY,aAI1DC,G,kDACF,WAAYzC,GAAQ,IAAD,8BACf,cAAMA,IAMVmG,YAAc,SAACC,GACX,EAAK7B,SAAS,CACV8B,cAAeD,EAAEE,OAAOC,SATb,EAanBC,WAAa,WACT,EAAKjC,SAAS,CACV8B,cAAe,MAfJ,EAmBnB3D,WAAa,WACT,EAAK8D,aACL,EAAKxG,MAAMW,cArBI,EAwBnB8F,WAAa,SAACL,GACVA,EAAEM,iBACsC,KAApC,EAAKxI,MAAMmI,cAAcM,SACzB,EAAK3G,MAAM4G,QAAQ,EAAK1I,MAAMmI,cAAcM,QAC5C,EAAKH,aACL,EAAK9D,eA3BT,EAAKxE,MAAQ,CACTmI,cAAe,IAHJ,E,0CAiCnB,WACI,IAAQ3D,EAAsDO,KAAtDP,WAAYyD,EAA0ClD,KAA1CkD,YAAaM,EAA6BxD,KAA7BwD,WAAYzG,EAAiBiD,KAAjBjD,MAAO9B,EAAU+E,KAAV/E,MAC5CmB,EAAUW,EAAVX,MACAgH,EAAkBnI,EAAlBmI,cAER,OACI,cAAC,KAAD,CACInD,QAAS7D,EAAMP,IACfsE,QAASV,EACTW,iBAAiB,EACjBC,kBAAkB,EAClBC,aAAc,CACVC,MAAO,OACPC,SAAU,QACVC,OAAQ,OACRC,aAAc,OACdC,QAAS,QAEbC,iBAAkB,CACdC,gBAAiB,sBAbzB,SAgBI,eAAC,GAAD,WACI,uBAAO+C,QAAQ,oBAAf,SACI,cAAC,GAAD,kCAEJ,cAACZ,GAAD,CACIxI,GAAG,oBACH8I,MAAOF,EACPS,SAAUX,EACVY,YAAY,wCAEhB,eAAC,GAAD,WACI,cAAC,GAAD,CAAQhG,QAAS2B,EAAYF,QAAM,EAAnC,oBACA,cAAC,GAAD,CAAQzB,QAAS0F,EAAjB,mC,GApEG1C,cAqFZ5D,gBATS,SAACjC,GAAD,MAAY,CAChCmB,MAAOnB,EAAMmB,UAGU,SAACe,GAAD,MAAe,CACtCwG,QAAS,SAAClJ,GAAD,OAAa0C,EAASE,EAAqB5C,KACpDiD,WAAY,kBAAMP,EAASK,SAGhBN,CAA6CsC,ICnItDuE,GAAcrH,IAAOC,IAAV,oLASjBoH,GAAYnH,YAAc,cAE1B,IAAMoH,GAAYtH,IAAOuH,GAAV,uHAMfD,GAAUpH,YAAc,YAaTsH,OAXf,WACI,OACI,eAACH,GAAD,WACI,cAACC,GAAD,+BACA,cAACG,GAAD,IACA,cAAC,EAAD,IACA,cAAC,GAAD,QCnBNC,GAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DAsCR,SAASC,GAAgBC,EAAOC,GAC5BC,UAAUC,cACLC,SAASJ,GACTK,MAAK,SAAAC,GACFA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBlK,QACb4J,UAAUC,cAAcQ,YAIxBC,QAAQC,IACJ,iHAKAZ,GAAUA,EAAOa,UACjBb,EAAOa,SAASR,KAMpBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACjBd,EAAOc,UAAUT,WAOxCU,OAAM,SAAAC,GACHL,QAAQK,MAAM,4CAA6CA,M,MCvFvEC,iBACE,cAAC,IAAD,CAAUxJ,MAAOA,EAAjB,SACE,cAAC,GAAD,MAEFyJ,SAASC,eAAe,SDSnB,SAAkBnB,GACrB,GAA6C,kBAAmBC,UAAW,CAGvE,GADkB,IAAImB,IAAIC,YAAwB3B,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,OAIrC,OAGJ7B,OAAO8B,iBAAiB,QAAQ,WAC5B,IAAMzB,EAAK,UAAMsB,YAAN,sBAEP7B,KAgEhB,SAAiCO,EAAOC,GAEpCyB,MAAM1B,EAAO,CACT2B,QAAS,CAAE,iBAAkB,YAE5BtB,MAAK,SAAAuB,GAEF,IAAMC,EAAcD,EAASD,QAAQjM,IAAI,gBAEjB,MAApBkM,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAC,GAC/BA,EAAa2B,aAAa5B,MAAK,WAC3BV,OAAOC,SAASsC,eAKxBnC,GAAgBC,EAAOC,MAG9Be,OAAM,WACHJ,QAAQC,IACJ,oEAvFAsB,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,MAAK,WAC/BO,QAAQC,IACJ,iHAMRd,GAAgBC,EAAOC,OClCvCE,K","file":"static/js/main.54a85376.chunk.js","sourcesContent":["const ADD_TASK = 'ADD_TASK';\r\nconst DONE_TASK = 'DONE_TASK';\r\nconst REMOVE_TASK = 'REMOVE_TASK';\r\n\r\nexport default {\r\n    ADD_TASK,\r\n    DONE_TASK,\r\n    REMOVE_TASK,\r\n};\r\n","import types from './types';\r\nimport ls from 'local-storage';\r\nimport { nanoid } from 'nanoid';\r\nimport { mapper } from '../../helpers/mapper';\r\n\r\nconst initTasks = () => {\r\n    let tasks = ls.get('tasks') || [];\r\n    tasks = tasks.map(task => mapper(task));\r\n\r\n    return tasks;\r\n}\r\n\r\nconst tasksReducer = (state = initTasks(), action) => {\r\n    switch (action.type) {\r\n        case types.ADD_TASK: {\r\n            const tasks = [...state, {\r\n                id: nanoid(),\r\n                content: action.content,\r\n                done: false,\r\n                create: new Date()\r\n            }];\r\n\r\n            ls.set('tasks', tasks);\r\n            return tasks;\r\n        }\r\n\r\n        case types.DONE_TASK: {\r\n            const arrayId = Array.isArray(action.id) ? action.id : [action.id];\r\n\r\n            const tasks = state.map(task => {\r\n                if (arrayId.includes(task.id) && task.done === false) {\r\n                    task.done = true\r\n                }\r\n                return task;\r\n            });\r\n\r\n            ls.set('tasks', tasks);\r\n            return tasks;\r\n        }\r\n\r\n        case types.REMOVE_TASK: {\r\n            const arrayId = Array.isArray(action.id) ? action.id : [action.id];\r\n            const tasks = state.filter(task => !arrayId.includes(task.id));\r\n\r\n            ls.set('tasks', tasks);\r\n            return tasks;\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default tasksReducer;\r\n","export const mapper = ({ id, content, done, create }) => {\r\n    return {\r\n        id,\r\n        content,\r\n        done,\r\n        create: new Date(create),\r\n    };\r\n}","import types from './types';\r\n\r\nconst addTask = content => ({\r\n    type: types.ADD_TASK, content\r\n});\r\n\r\nconst doneTask = id => ({\r\n    type: types.DONE_TASK, id\r\n});\r\n\r\nconst removeTask = id => ({\r\n    type: types.REMOVE_TASK, id\r\n});\r\n\r\nexport default {\r\n    addTask,\r\n    doneTask,\r\n    removeTask\r\n}\r\n\r\n","import tasksReducer from './reducers';\r\n\r\nexport { default as tasksTypes } from './types';\r\nexport { default as tasksActions } from './actions';\r\nexport default tasksReducer;\r\n","const TOGGLE_TASKS_MANAGEMENT = 'TOGGLE_TASKS_MANAGEMENT';\r\nconst RESET_TASKS_MANAGEMENT = 'RESET_TASKS_MANAGEMENT';\r\n\r\nexport default {\r\n    TOGGLE_TASKS_MANAGEMENT,\r\n    RESET_TASKS_MANAGEMENT,\r\n};\r\n","import types from './types';\r\n\r\nconst INIT_TASKS_MANAGEMENT = [];\r\n\r\nconst tasksManagementReducer = (state = INIT_TASKS_MANAGEMENT, action) => {\r\n    switch (action.type) {\r\n        case types.TOGGLE_TASKS_MANAGEMENT: {\r\n            if (state.includes(action.id)) {\r\n                return state.filter(id => id !== action.id);\r\n            }\r\n\r\n            return [\r\n                ...state,\r\n                action.id\r\n            ]\r\n        }\r\n\r\n        case types.RESET_TASKS_MANAGEMENT:\r\n            return INIT_TASKS_MANAGEMENT;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default tasksManagementReducer;\r\n","import types from './types';\r\n\r\nconst toggleTasksManagement = (id) => ({\r\n    type: types.TOGGLE_TASKS_MANAGEMENT, id\r\n});\r\n\r\nconst resetTasksManagement = () => ({\r\n    type: types.RESET_TASKS_MANAGEMENT\r\n});\r\n\r\nexport default {\r\n    toggleTasksManagement,\r\n    resetTasksManagement\r\n};\r\n","import tasksManagementReducer from './reducers';\r\n\r\nexport { default as tasksEditTypes } from './types';\r\nexport { default as tasksEditActions } from './actions';\r\nexport default tasksManagementReducer;","const MODE_ADD = 'MODE_ADD';\r\nconst MODE_EDIT = 'MODE_EDIT';\r\nconst MODE_SHOW = 'MODE_SHOW';\r\nconst RESET_MODE = 'RESET_MODE';\r\n\r\nexport default {\r\n    MODE_ADD,\r\n    MODE_EDIT,\r\n    MODE_SHOW,\r\n    RESET_MODE\r\n};\r\n","import types from './types';\r\n\r\nconst INIT_MODES = {\r\n    add: false,\r\n    edit: false,\r\n    show: false\r\n}\r\n\r\nconst modesReducer = (state = INIT_MODES, action) => {\r\n    switch (action.type) {\r\n        case types.MODE_ADD:\r\n            return {\r\n                add: true,\r\n                edit: false,\r\n                show: false\r\n            }\r\n\r\n        case types.MODE_EDIT:\r\n            return {\r\n                add: false,\r\n                edit: true,\r\n                show: false\r\n            }\r\n\r\n        case types.MODE_SHOW:\r\n            return {\r\n                add: false,\r\n                edit: false,\r\n                show: true\r\n            }\r\n\r\n        case types.RESET_MODE:\r\n            return INIT_MODES;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default modesReducer;\r\n","import types from './types';\r\n\r\nconst setAddingMode = () => ({\r\n    type: types.MODE_ADD\r\n});\r\n\r\nconst setEditingMode = () => ({\r\n    type: types.MODE_EDIT\r\n});\r\n\r\nconst setShowingMode = () => ({\r\n    type: types.MODE_SHOW\r\n});\r\n\r\nconst resetModes = () => ({\r\n    type: types.RESET_MODE\r\n});\r\n\r\nexport default {\r\n    setAddingMode,\r\n    setEditingMode,\r\n    setShowingMode,\r\n    resetModes\r\n}\r\n","import modesReducer from './reducers';\r\n\r\nexport { default as modesTypes } from './types';\r\nexport { default as modesActions } from './actions';\r\nexport default modesReducer;\r\n","import { combineReducers } from 'redux';\r\nimport tasksReducer from './store/tasks';\r\nimport tasksManagementReducer from './store/tasksManagement';\r\nimport modesReducer from './store/modes';\r\n\r\nconst mainReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    tasksManagement: tasksManagementReducer,\r\n    modes: modesReducer\r\n});\r\n\r\nexport default mainReducer;\r\n","import { createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport mainReducers from './reducers';\r\n\r\nconst store = createStore(mainReducers, composeWithDevTools());\r\n\r\nexport default store;\r\n","import { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport tasksActions from '../store/tasks/actions';\r\nimport tasksManagementActions from '../store/tasksManagement/actions';\r\nimport modesActions from '../store/modes/actions';\r\n\r\nconst Navbar = styled.div`\r\n    position: absolute;\r\n    width: 100vw;\r\n    height: 50px;\r\n    bottom: 0;\r\n    left: 0;\r\n    background-color: #2979FF;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n`;\r\n\r\nNavbar.displayName = 'Navbar';\r\n\r\nconst Button = styled.button`\r\n    font-size: 16px;\r\n    padding: 15px 20px;\r\n    color: white;\r\n    background-color: transparent;\r\n    border: none;\r\n    cursor: pointer;\r\n    user-select: none;\r\n\r\n    ${props => props.single && 'margin-left: auto'};\r\n`;\r\n\r\nButton.displayName = 'Button';\r\n\r\nconst ButtonGroup = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n`;\r\n\r\nfunction PageMenu({\r\n    tasks,\r\n    doneTasks,\r\n    removeTasks,\r\n    tasksManagement,\r\n    modes,\r\n    setEditingMode,\r\n    setAddingMode,\r\n    resetModes,\r\n    resetTasksManagement\r\n}) {\r\n    return (\r\n        <Navbar>\r\n            {tasks.length > 0 && (modes.edit ?\r\n                <Button onClick={() => { resetModes(); resetTasksManagement() }}>anuluj</Button> :\r\n                <Button onClick={setEditingMode}>zarządzaj</Button>)}\r\n            {modes.edit ?\r\n                <ButtonGroup>\r\n                    {tasks.some(task => tasksManagement.includes(task.id) && !task.done) &&\r\n                        <Button onClick={() => {\r\n                            doneTasks(tasksManagement);\r\n                            resetModes();\r\n                            resetTasksManagement();\r\n                        }}>wykonaj</Button>}\r\n\r\n                    {tasksManagement.length > 0 &&\r\n                        <Button onClick={() => {\r\n                            removeTasks(tasksManagement);\r\n                            resetModes();\r\n                            resetTasksManagement();\r\n                        }}>usuń</Button>}\r\n\r\n                </ButtonGroup> :\r\n                <Button single={tasks.length === 0} onClick={setAddingMode}>dodaj</Button>}\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    tasks: state.tasks,\r\n    tasksManagement: state.tasksManagement,\r\n    modes: state.modes\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    removeTasks: (id) => dispatch(tasksActions.removeTask(id)),\r\n    doneTasks: (id) => dispatch(tasksActions.doneTask(id)),\r\n    setEditingMode: () => dispatch(modesActions.setEditingMode()),\r\n    setAddingMode: () => dispatch(modesActions.setAddingMode()),\r\n    resetModes: () => dispatch(modesActions.resetModes()),\r\n    resetTasksManagement: () => dispatch(tasksManagementActions.resetTasksManagement())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PageMenu);","import { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport tasksManagementActions from '../store/tasksManagement/actions';\r\n\r\nconst CheckboxAlias = styled.div`\r\n    /* display: block; */\r\n    width: 40px;\r\n    height: 40px;\r\n    border: 1px solid;\r\n    border-color: ${props => props.isClick ? '#2979FF' : 'lightgray'};\r\n    border-radius: 50%;\r\n    position: relative;\r\n\r\n    &:hover {\r\n        border-color: #2979FF;\r\n    }\r\n\r\n    &:before {\r\n        content: '';\r\n        display: ${props => props.isClick ? 'block' : 'none'};\r\n        position: absolute;\r\n        width: 22px;\r\n        height: 22px;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n        background-color: #2979FF;\r\n        border-radius: 50%;\r\n    }\r\n`;\r\n\r\nCheckboxAlias.displayName = 'CheckboxAlias';\r\n\r\nconst Label = styled.label`\r\n    cursor: pointer;\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    margin-right: 20px;\r\n`;\r\n\r\nLabel.displayName = 'Label';\r\n\r\nconst Checkbox = styled.input.attrs({\r\n    type: 'checkbox'\r\n})`\r\n    opacity: 0;\r\n    position: absolute;\r\n\r\n    &:focus ~ ${CheckboxAlias} {\r\n        border-color: #2979FF;\r\n    }\r\n`;\r\n\r\nCheckbox.displayName = 'Checkbox';\r\n\r\nfunction ItemCheckbox({ task, tasksManagement, toggleTasksManagement }) {\r\n    const isClick = tasksManagement.some(id => id === task.id);\r\n\r\n    return (\r\n        <Label>\r\n            <Checkbox onClick={() => { toggleTasksManagement(task.id) }} />\r\n            <CheckboxAlias isClick={isClick} />\r\n        </Label>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    tasksManagement: state.tasksManagement\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    toggleTasksManagement: (id) => dispatch(tasksManagementActions.toggleTasksManagement(id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ItemCheckbox);\r\n","import Moment from 'react-moment';\r\nimport styled from 'styled-components';\r\n\r\nconst ItemButton = styled.button`\r\n    width: 100%;\r\n    border: none;\r\n    padding: 12px 0;\r\n    text-align: left;\r\n    background-color: transparent;\r\n    cursor: pointer;\r\n`;\r\n\r\nItemButton.displayName = 'ItemButton';\r\n\r\nconst ItemContent = styled.p`\r\n    font-size: 16px;\r\n`;\r\n\r\nItemContent.displayName = 'ItemContent';\r\n\r\nconst ItemTime = styled.p`\r\n    color: #2979FF;\r\n    font-size: 12px;\r\n    margin-bottom: 7px;\r\n`;\r\n\r\nItemTime.displayName = 'ItemTime';\r\n\r\nfunction ItemData({ task, showTaskEvent, openModalEvent }) {\r\n    return (\r\n        <ItemButton onClick={() => { openModalEvent(); showTaskEvent() }}>\r\n            <ItemTime>\r\n                <Moment format=\"DD.MM.YYYY kk:mm\">{task.create}</Moment>\r\n            </ItemTime>\r\n            <ItemContent>{task.content}</ItemContent>\r\n        </ItemButton>\r\n    )\r\n}\r\n\r\nexport default ItemData\r\n","import { Component } from 'react';\r\nimport Moment from 'react-moment';\r\nimport Modal from 'rodal';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport tasksActions from '../store/tasks/actions';\r\nimport modesActions from '../store/modes/actions';\r\nimport 'rodal/lib/rodal.css';\r\n\r\nconst PopupContainer = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 100%;\r\n    grid-template-rows: auto auto 1fr auto;\r\n    height: 100%;\r\n    position: relative;\r\n`;\r\n\r\nconst PopupTitle = styled.h2`\r\n    font-size: 2.1em;\r\n    padding-bottom: 10px;\r\n    border-bottom: 1px solid #2979FF;\r\n`;\r\n\r\nconst PopupTime = styled.p`\r\n    color: #2979FF;\r\n    font-size: 0.9em;\r\n    margin-top: 10px;\r\n`;\r\n\r\nconst PopupDone = styled.div`\r\n    position: absolute;\r\n    right: 8px;\r\n    top: 17px;\r\n    transform: translateY(-50%);\r\n\r\n    &:before {\r\n        content: '';\r\n        display: block;\r\n        transform: rotate(45deg);\r\n        height: 26px;\r\n        width: 13px;\r\n        border-bottom: 2px solid #000;\r\n        border-right: 2px solid #000;\r\n    }\r\n`;\r\n\r\nconst PopupContent = styled.div`\r\n    font-size: 1.2em;\r\n    margin: 20px 0;\r\n    white-space: pre-wrap;\r\n    overflow: auto;\r\n`;\r\n\r\nconst PopupControl = styled.div`\r\n    display: grid;\r\n    grid-template-columns: ${props => props.done ? 'repeat(2, 1fr)' : 'repeat(3, 1fr)'};\r\n    grid-column-gap: 5px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    font-size: 14px;\r\n    font-weight: 700;\r\n    padding: 15px 0;\r\n    cursor: pointer;\r\n    color: #FFF;\r\n    border: none;\r\n    background-color: ${props => props.cancle ? '#2979FF' : props.done ? '#2E7D32' : '#FF3D00'};\r\n    border-radius: ${props => props.cancle ? '0 0 0 15px' : props.done ? '0' : '0 0 15px 0'};\r\n\r\n    &:hover,\r\n    &:focus {\r\n        background-color: ${props => props.cancle ? '#1E88E5' : props.done ? '#388E3C' : '#EF6000'};\r\n    }\r\n`;\r\n\r\nclass PopupAddTask extends Component {\r\n    closePopup = () => {\r\n        this.props.closeModalEvent();\r\n        this.props.resetModes();\r\n    }\r\n\r\n    doneTaskAndClosePopup = () => {\r\n        this.closePopup();\r\n        this.props.doneTask(this.props.task.id);\r\n    }\r\n\r\n    removeTaskAndClosePopup = () => {\r\n        this.closePopup();\r\n\r\n        setTimeout(() => {\r\n            this.props.removeTask(this.props.task.id);\r\n        }, 300);\r\n\r\n    }\r\n\r\n    render() {\r\n        const { task } = this.props;\r\n        return (\r\n            <Modal\r\n                visible={this.props.isOpen || false}\r\n                onClose={this.closePopup}\r\n                showCloseButton={false}\r\n                closeMaskOnClick={true}\r\n                customStyles={{\r\n                    width: '85vw',\r\n                    maxWidth: '425px',\r\n                    height: '85vh',\r\n                    borderRadius: '15px',\r\n                    padding: '15px'\r\n                }}\r\n                customMaskStyles={{\r\n                    backgroundColor: 'rgba(0, 0, 0, 0.7)'\r\n                }}\r\n            >\r\n                <PopupContainer>\r\n                    <PopupTitle>Zadanie</PopupTitle>\r\n                    {task.done && <PopupDone />}\r\n                    <PopupTime>\r\n                        <Moment format=\"DD.MM.YYYY kk:mm\">{task.create}</Moment>\r\n                    </PopupTime>\r\n                    <PopupContent>{task.content}</PopupContent>\r\n                    <PopupControl done={task.done}>\r\n                        <Button cancle onClick={this.closePopup}>anuluj</Button>\r\n                        {!task.done && <Button done onClick={this.doneTaskAndClosePopup}>wykonaj</Button>}\r\n                        <Button onClick={this.removeTaskAndClosePopup}>usuń</Button>\r\n                    </PopupControl>\r\n                </PopupContainer>\r\n\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    modes: state.modes.list\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    doneTask: (id) => dispatch(tasksActions.doneTask(id)),\r\n    removeTask: (id) => dispatch(tasksActions.removeTask(id)),\r\n    resetModes: () => dispatch(modesActions.resetModes())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PopupAddTask);","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport modesActions from '../store/modes/actions';\r\nimport tasksManagementActions from '../store/tasksManagement/actions';\r\n\r\nimport ItemCheckbox from './ItemCheckbox';\r\nimport ItemData from './ItemData';\r\nimport PopupShowTask from './PopupShowTask';\r\n\r\nconst ListItem = styled.li`\r\n    border-bottom: 1px solid lightgray;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    position: relative;\r\n    user-select: none;\r\n`;\r\n\r\nListItem.displayName = 'ListItem';\r\n\r\nconst ItemWrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    transition: transform 0.10s linear, width 0.10s linear;\r\n    overflow: hidden;\r\n    \r\n    width: ${props => props.done ? !props.edit ? 'calc(100% + 5px)' : 'calc(100% - 45px)' : 'calc(100% + 55px)'};\r\n    transform: ${props => !props.edit ? 'translateX(-55px)' : 'translateX(0)'};\r\n`;\r\n\r\nItemWrapper.displayName = 'ItemWrapper';\r\n\r\nconst ItemDone = styled.div`\r\n    position: absolute;\r\n    right: 6px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n\r\n    &:before {\r\n        content: '';\r\n        display: block;\r\n        transform: rotate(45deg);\r\n        height: 20px;\r\n        width: 10px;\r\n        border-bottom: 2px solid #2979FF;\r\n        border-right: 2px solid #2979FF;\r\n    }\r\n`;\r\n\r\nItemDone.displayName = 'ItemDone';\r\n\r\nclass OnceTask extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            openModal: false\r\n        }\r\n    }\r\n\r\n    changeOpenModal = () => {\r\n        this.props.resetTasksManagement();\r\n        this.setState(prevState => ({\r\n            openModal: !prevState.openModal\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        const { changeOpenModal, props, state } = this;\r\n        const { task, modes, setShowingMode } = props;\r\n        const { openModal } = state;\r\n\r\n        return (\r\n            <ListItem>\r\n                <ItemWrapper edit={modes.edit} done={task.done}>\r\n                    <ItemCheckbox task={task} />\r\n                    <ItemData openModalEvent={changeOpenModal} showTaskEvent={setShowingMode} task={task} />\r\n                </ItemWrapper>\r\n                {task.done && <ItemDone />}\r\n\r\n                <PopupShowTask closeModalEvent={changeOpenModal} isOpen={openModal} task={task} />\r\n            </ListItem>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    modes: state.modes\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setShowingMode: () => dispatch(modesActions.setShowingMode()),\r\n    resetTasksManagement: () => dispatch(tasksManagementActions.resetTasksManagement())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OnceTask);\r\n","import styled from 'styled-components';\r\n\r\nconst ListEmpty = styled.div`\r\n    height: 100%;\r\n    padding: 15px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n`;\r\n\r\nListEmpty.displayName = 'ListEmpty';\r\n\r\nconst Message = styled.p`\r\n    margin-bottom: 2em;\r\n`;\r\n\r\nMessage.displayName = 'Message';\r\n\r\nconst QuotationWrapper = styled.p`\r\n    text-align: justify;\r\n`;\r\n\r\nQuotationWrapper.displayName = 'QuotationWrapper';\r\n\r\nconst Quotation = styled.q`\r\n    font-weight: 700;\r\n    line-height: 1.4em;\r\n`;\r\n\r\nQuotation.displayName = 'Quotation';\r\n\r\nconst messageText = [\r\n    'Brak zadań mój Panie.',\r\n    'Sir, lista zadań jest pusta!'\r\n]\r\n\r\nconst quotationTexts = [\r\n    {\r\n        quotation: 'Jeśli ustawisz sobie cele absurdalnie wysoko i ich nie osiągniesz, to twoja „porażka” i tak będzie powyżej „sukcesu” innych ludzi.',\r\n        author: 'James Cameron'\r\n    },\r\n    {\r\n        quotation: 'Zawsze wydaje się, że coś jest niemożliwe, dopóki nie zostanie to zrobione.',\r\n        author: 'Nelson Mandela'\r\n    },\r\n    {\r\n        quotation: 'Sukces wymaga wcześniejszego przygotowania, bez niego z pewnością osiągniemy porażkę.',\r\n        author: 'Konfucjusz'\r\n    },\r\n    {\r\n        quotation: 'Wybierz jeden pomysł. Spraw, aby ten pomysł stał się Twoim życiem – myśl o nim, śnij o nim, żyj tym pomysłem. Pozwól mózgowi, mięśniom, nerwom, każdej części Twojego ciała napełnić się tym pomysłem i po prostu zostaw w spokoju wszystkie inne pomysły. To jest droga do sukcesu.',\r\n        author: 'Swami Vivekananda'\r\n    },\r\n    {\r\n        quotation: 'Wszelki postęp dzieje się poza strefą komfortu.',\r\n        author: 'Michael John Bobak'\r\n    },\r\n    {\r\n        quotation: 'Jeśli potrafisz o czymś marzyć, to potrafisz także tego dokonać.',\r\n        author: 'Walt Disney'\r\n    },\r\n    {\r\n        quotation: 'Jeśli nie stworzysz własnego planu na życie, prawdopodobnie znajdziesz się w planie kogoś innego. Zgadnij, co w nim dla Ciebie przygotowano? Nic specjalnego.',\r\n        author: 'Jim Rohn'\r\n    },\r\n    {\r\n        quotation: 'Aby osiągnąć sukces, musisz mądrze pracować, nigdy nie rezygnować – lecz przede wszystkim powinieneś pielęgnować swą wspaniałą obsesję.',\r\n        author: 'Walt Disney'\r\n    },\r\n    {\r\n        quotation: 'Żadne zadanie nie jest szczególnie trudne, jeśli podzielisz je na mniejsze podzadania.',\r\n        author: 'Henry Ford'\r\n    },\r\n    {\r\n        quotation: 'Nie bądź jednym z tych, którzy obawiając się niepowodzenia, niczego nie próbują.',\r\n        author: 'Thomas Metron'\r\n    }\r\n];\r\n\r\nfunction ListTasksEmpty() {\r\n    const randomIndexMessage = Math.floor(Math.random() * messageText.length);\r\n    const randomIndexQuotation = Math.floor(Math.random() * quotationTexts.length);\r\n\r\n    return (\r\n        <ListEmpty>\r\n            <Message>{messageText[randomIndexMessage]}</Message>\r\n            <QuotationWrapper>\r\n                <Quotation>{quotationTexts[randomIndexQuotation].quotation}</Quotation>\r\n                {\" - \"}\r\n                <cite>{quotationTexts[randomIndexQuotation].author}</cite>\r\n            </QuotationWrapper>\r\n        </ListEmpty>\r\n    );\r\n}\r\n\r\nexport default ListTasksEmpty;\r\n","import { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport OnceTask from './OnceTask';\r\nimport ListTasksEmpty from './ListTasksEmpty';\r\n\r\nconst MainContent = styled.div`\r\n    padding: 0 15px;\r\n    margin-bottom: 50px;\r\n    overflow: hidden;\r\n    overflow-y: auto;\r\n`;\r\n\r\nMainContent.displayName = 'MainContent';\r\n\r\nconst List = styled.ul`\r\n    list-style: none;\r\n    width: 100%;\r\n`;\r\n\r\nList.displayName = 'List';\r\n\r\nfunction Content({ tasks }) {\r\n    return (\r\n        <MainContent>\r\n            {tasks.length > 0\r\n                ? <List>{tasks.map(task => <OnceTask task={task} key={task.id} />)}</List>\r\n                : <ListTasksEmpty />}\r\n        </MainContent>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.tasks.sort((a, b) => a.create < b.create)\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(Content);\r\n","import { Component } from 'react';\r\nimport Modal from 'rodal';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport tasksActions from '../store/tasks/actions';\r\nimport modesActions from '../store/modes/actions';\r\nimport 'rodal/lib/rodal.css';\r\n\r\nconst PopupContainer = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 100%;\r\n    grid-template-rows: auto 1fr auto;\r\n    height: 100%;\r\n`;\r\n\r\nconst PopupTitle = styled.h2`\r\n    font-size: 2.1em;\r\n    padding-bottom: 10px;\r\n    border-bottom: 1px solid #2979FF;\r\n`;\r\n\r\nconst PopupFieldText = styled.textarea`\r\n    resize: none;\r\n    margin: 20px 0;\r\n    font-size: 1.1em;\r\n    line-height: 1.1em;\r\n    letter-spacing: 0.1em;\r\n    border: none;\r\n`;\r\n\r\nconst PopupControl = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    grid-column-gap: 5px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    font-size: 14px;\r\n    font-weight: 700;\r\n    padding: 15px;\r\n    cursor: pointer;\r\n    color: #FFF;\r\n    border: none;\r\n    background-color: ${props => props.cancle ? '#2979FF' : '#2E7D32'};\r\n    border-radius: ${props => props.cancle ? '0 0 0 15px' : '0 0 15px 0'};\r\n\r\n    &:hover,\r\n    &:focus {\r\n        background-color: ${props => props.cancle ? '#1E88E5' : '#388E3C'};\r\n    }\r\n`;\r\n\r\nclass PopupAddTask extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            valueTextarea: ''\r\n        };\r\n    }\r\n\r\n    changeValue = (e) => {\r\n        this.setState({\r\n            valueTextarea: e.target.value\r\n        })\r\n    }\r\n\r\n    resetValue = () => {\r\n        this.setState({\r\n            valueTextarea: ''\r\n        })\r\n    }\r\n\r\n    closePopup = () => {\r\n        this.resetValue();\r\n        this.props.resetModes();\r\n    }\r\n\r\n    createTask = (e) => {\r\n        e.preventDefault();\r\n        if (this.state.valueTextarea.trim() !== '') {\r\n            this.props.addTask(this.state.valueTextarea.trim());\r\n            this.resetValue();\r\n            this.closePopup();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { closePopup, changeValue, createTask, props, state } = this;\r\n        const { modes } = props;\r\n        const { valueTextarea } = state;\r\n\r\n        return (\r\n            <Modal\r\n                visible={modes.add}\r\n                onClose={closePopup}\r\n                showCloseButton={false}\r\n                closeMaskOnClick={true}\r\n                customStyles={{\r\n                    width: '85vw',\r\n                    maxWidth: '425px',\r\n                    height: '85vh',\r\n                    borderRadius: '15px',\r\n                    padding: '15px'\r\n                }}\r\n                customMaskStyles={{\r\n                    backgroundColor: 'rgba(0, 0, 0, 0.7)'\r\n                }}\r\n            >\r\n                <PopupContainer>\r\n                    <label htmlFor='fieldForValueTask'>\r\n                        <PopupTitle>Dodawanie zadania</PopupTitle>\r\n                    </label>\r\n                    <PopupFieldText\r\n                        id='fieldForValueTask'\r\n                        value={valueTextarea}\r\n                        onChange={changeValue}\r\n                        placeholder='tutaj wpisz treść zadania'\r\n                    />\r\n                    <PopupControl>\r\n                        <Button onClick={closePopup} cancle>anuluj</Button>\r\n                        <Button onClick={createTask}>utwórz</Button>\r\n                    </PopupControl>\r\n                </PopupContainer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    modes: state.modes\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    addTask: (content) => dispatch(tasksActions.addTask(content)),\r\n    resetModes: () => dispatch(modesActions.resetModes())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PopupAddTask);","import styled from 'styled-components';\r\n\r\nimport PageMenu from './PageMenu';\r\nimport PageContent from './PageContent';\r\nimport PopupAddTask from './PopupAddTask';\r\n\r\nconst PageWrapper = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    overflow: hidden;\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: auto 1fr;\r\n`;\r\n\r\nPageWrapper.displayName = 'PageWrapper';\r\n\r\nconst PageTitle = styled.h1`\r\n    padding: 10px 20px;\r\n    text-align: center;\r\n    border-bottom: 1px solid #d3d3d3;\r\n`;\r\n\r\nPageTitle.displayName = 'PageTitle';\r\n\r\nfunction Page() {\r\n    return (\r\n        <PageWrapper>\r\n            <PageTitle>Lista zadań</PageTitle>\r\n            <PageContent />\r\n            <PageMenu />\r\n            <PopupAddTask />\r\n        </PageWrapper>\r\n    )\r\n}\r\n\r\nexport default Page;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' }\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import { render } from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport store from './mainStore';\r\nimport Page from './components/Page';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <Page />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.register();"],"sourceRoot":""}