{"version":3,"sources":["store/tasks/types.js","store/tasks/reducers.js","helpers/mapper.js","store/tasks/actions.js","store/tasks/index.js","store/tasksManagement/types.js","store/tasksManagement/reducers.js","store/tasksManagement/actions.js","store/tasksManagement/index.js","store/modes/types.js","store/modes/reducers.js","store/modes/actions.js","store/modes/index.js","reducers.js","mainStore.js","components/Page/Menu/Menu.js","helpers/randomInteger.js","components/MessageWelcome/Message.js","components/MessageWelcome/Quotation.js","components/MessageWelcome/MessageWelcome.js","components/Tasks/Item/Checkbox.js","components/Tasks/Item/Data.js","components/Popup/ShowingTask.js","components/Tasks/Item/Item.js","components/Tasks/Tasks.js","components/Page/Content/Content.js","components/Page/Title/Title.js","components/Popup/AddingTask.js","components/Page/Page.js","serviceWorker.js","index.js"],"names":["initTasks","tasks","ls","get","map","task","id","content","done","create","Date","mapper","type","types","tasksReducer","state","action","nanoid","set","arrayId","Array","isArray","includes","filter","INIT_TASKS_MANAGEMENT","tasksManagementReducer","INIT_MODES","add","edit","show","modesReducer","mainReducer","combineReducers","tasksManagement","modes","store","createStore","mainReducers","composeWithDevTools","Navbar","styled","div","displayName","Button","button","props","single","ButtonGroup","connect","dispatch","removeTasks","tasksActions","doneTasks","setEditingMode","modesActions","setAddingMode","resetModes","resetTasksManagement","tasksManagementActions","length","onClick","some","randomInteger","max","min","parseInt","Number","Math","floor","random","MessageText","p","messages","Message","randomIndex","randomMessage","QuotationWrapper","QuotationText","q","quotations","quotation","author","Quotation","MessageWelcomeWrapper","MessageWelcome","CheckboxWrapper","Label","label","isActive","CheckboxElement","input","Checkbox","toggleTasksManagementAndActive","toggleTasksManagement","setState","componentDidUpdate","this","htmlFor","Component","ItemButton","ItemContent","ItemTime","Data","handleModalAndShowingMode","format","PopupContainer","PopupTitle","h2","PopupTime","Moment","PopupDone","PopupContent","PopupControl","BtnCancle","BtnDone","BtnRemove","PopupAddTask","closePopup","closeModalEvent","doneTaskAndClosePopup","doneTask","removeTaskAndClosePopup","setTimeout","removeTask","visible","isOpen","onClose","showCloseButton","closeMaskOnClick","customStyles","width","maxWidth","height","borderRadius","padding","customMaskStyles","backgroundColor","list","ListItem","li","ItemWrapper","ItemDone","Item","changeOpenModal","prevState","openModal","setShowingMode","List","ul","Tasks","sort","a","b","PageTitle","h1","Title","PopupFieldText","textarea","cancle","changeValue","e","valueTextarea","target","value","resetValue","createTask","preventDefault","trim","addTask","onChange","placeholder","Page","Menu","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e7c00d70.chunk.js","sourcesContent":["const ADD_TASK = 'ADD_TASK';\r\nconst DONE_TASK = 'DONE_TASK';\r\nconst REMOVE_TASK = 'REMOVE_TASK';\r\n\r\nexport default {\r\n    ADD_TASK,\r\n    DONE_TASK,\r\n    REMOVE_TASK,\r\n};\r\n","import types from './types';\r\nimport ls from 'local-storage';\r\nimport { nanoid } from 'nanoid';\r\nimport { mapper } from '../../helpers/mapper';\r\n\r\nconst initTasks = () => {\r\n    let tasks = ls.get('tasks') || [];\r\n    tasks = tasks.map(task => mapper(task));\r\n\r\n    return tasks;\r\n}\r\n\r\nconst tasksReducer = (state = initTasks(), action) => {\r\n    switch (action.type) {\r\n        case types.ADD_TASK: {\r\n            const tasks = [...state, {\r\n                id: nanoid(),\r\n                content: action.content,\r\n                done: false,\r\n                create: new Date()\r\n            }];\r\n\r\n            ls.set('tasks', tasks);\r\n            return tasks;\r\n        }\r\n\r\n        case types.DONE_TASK: {\r\n            const arrayId = Array.isArray(action.id) ? action.id : [action.id];\r\n\r\n            const tasks = state.map(task => {\r\n                if (arrayId.includes(task.id) && task.done === false) {\r\n                    task.done = true\r\n                }\r\n                return task;\r\n            });\r\n\r\n            ls.set('tasks', tasks);\r\n            return tasks;\r\n        }\r\n\r\n        case types.REMOVE_TASK: {\r\n            const arrayId = Array.isArray(action.id) ? action.id : [action.id];\r\n            const tasks = state.filter(task => !arrayId.includes(task.id));\r\n\r\n            ls.set('tasks', tasks);\r\n            return tasks;\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default tasksReducer;\r\n","export const mapper = ({ id, content, done, create }) => {\r\n    return {\r\n        id,\r\n        content,\r\n        done,\r\n        create: new Date(create),\r\n    };\r\n}","import types from './types';\r\n\r\nconst addTask = content => ({\r\n    type: types.ADD_TASK, content\r\n});\r\n\r\nconst doneTask = id => ({\r\n    type: types.DONE_TASK, id\r\n});\r\n\r\nconst removeTask = id => ({\r\n    type: types.REMOVE_TASK, id\r\n});\r\n\r\nexport default {\r\n    addTask,\r\n    doneTask,\r\n    removeTask\r\n}\r\n\r\n","import tasksReducer from './reducers';\r\n\r\nexport { default as tasksTypes } from './types';\r\nexport { default as tasksActions } from './actions';\r\nexport default tasksReducer;\r\n","const TOGGLE_TASKS_MANAGEMENT = 'TOGGLE_TASKS_MANAGEMENT';\r\nconst RESET_TASKS_MANAGEMENT = 'RESET_TASKS_MANAGEMENT';\r\n\r\nexport default {\r\n    TOGGLE_TASKS_MANAGEMENT,\r\n    RESET_TASKS_MANAGEMENT,\r\n};\r\n","import types from './types';\r\n\r\nconst INIT_TASKS_MANAGEMENT = [];\r\n\r\nconst tasksManagementReducer = (state = INIT_TASKS_MANAGEMENT, action) => {\r\n    switch (action.type) {\r\n        case types.TOGGLE_TASKS_MANAGEMENT: {\r\n            if (state.includes(action.id)) {\r\n                return state.filter(id => id !== action.id);\r\n            }\r\n\r\n            return [\r\n                ...state,\r\n                action.id\r\n            ]\r\n        }\r\n\r\n        case types.RESET_TASKS_MANAGEMENT:\r\n            return INIT_TASKS_MANAGEMENT;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default tasksManagementReducer;\r\n","import types from './types';\r\n\r\nconst toggleTasksManagement = (id) => ({\r\n    type: types.TOGGLE_TASKS_MANAGEMENT, id\r\n});\r\n\r\nconst resetTasksManagement = () => ({\r\n    type: types.RESET_TASKS_MANAGEMENT\r\n});\r\n\r\nexport default {\r\n    toggleTasksManagement,\r\n    resetTasksManagement\r\n};\r\n","import tasksManagementReducer from './reducers';\r\n\r\nexport { default as tasksEditTypes } from './types';\r\nexport { default as tasksEditActions } from './actions';\r\nexport default tasksManagementReducer;","const MODE_ADD = 'MODE_ADD';\r\nconst MODE_EDIT = 'MODE_EDIT';\r\nconst MODE_SHOW = 'MODE_SHOW';\r\nconst RESET_MODE = 'RESET_MODE';\r\n\r\nexport default {\r\n    MODE_ADD,\r\n    MODE_EDIT,\r\n    MODE_SHOW,\r\n    RESET_MODE\r\n};\r\n","import types from './types';\r\n\r\nconst INIT_MODES = {\r\n    add: false,\r\n    edit: false,\r\n    show: false\r\n}\r\n\r\nconst modesReducer = (state = INIT_MODES, action) => {\r\n    switch (action.type) {\r\n        case types.MODE_ADD:\r\n            return {\r\n                add: true,\r\n                edit: false,\r\n                show: false\r\n            }\r\n\r\n        case types.MODE_EDIT:\r\n            return {\r\n                add: false,\r\n                edit: true,\r\n                show: false\r\n            }\r\n\r\n        case types.MODE_SHOW:\r\n            return {\r\n                add: false,\r\n                edit: false,\r\n                show: true\r\n            }\r\n\r\n        case types.RESET_MODE:\r\n            return INIT_MODES;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default modesReducer;\r\n","import types from './types';\r\n\r\nconst setAddingMode = () => ({\r\n    type: types.MODE_ADD\r\n});\r\n\r\nconst setEditingMode = () => ({\r\n    type: types.MODE_EDIT\r\n});\r\n\r\nconst setShowingMode = () => ({\r\n    type: types.MODE_SHOW\r\n});\r\n\r\nconst resetModes = () => ({\r\n    type: types.RESET_MODE\r\n});\r\n\r\nexport default {\r\n    setAddingMode,\r\n    setEditingMode,\r\n    setShowingMode,\r\n    resetModes\r\n}\r\n","import modesReducer from './reducers';\r\n\r\nexport { default as modesTypes } from './types';\r\nexport { default as modesActions } from './actions';\r\nexport default modesReducer;\r\n","import { combineReducers } from 'redux';\r\nimport tasksReducer from './store/tasks';\r\nimport tasksManagementReducer from './store/tasksManagement';\r\nimport modesReducer from './store/modes';\r\n\r\nconst mainReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    tasksManagement: tasksManagementReducer,\r\n    modes: modesReducer\r\n});\r\n\r\nexport default mainReducer;\r\n","import { createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport mainReducers from './reducers';\r\n\r\nconst store = createStore(mainReducers, composeWithDevTools());\r\n\r\nexport default store;\r\n","import { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport tasksActions from '../../../store/tasks/actions';\r\nimport tasksManagementActions from '../../../store/tasksManagement/actions';\r\nimport modesActions from '../../../store/modes/actions';\r\n\r\nconst Navbar = styled.div`\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 50px;\r\n    background-color: #2979FF;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n`;\r\n\r\nNavbar.displayName = 'Navbar';\r\n\r\nconst Button = styled.button`\r\n    font-size: 16px;\r\n    padding: 15px 20px;\r\n    color: white;\r\n    background-color: transparent;\r\n    border: none;\r\n    cursor: pointer;\r\n    user-select: none;\r\n\r\n    ${props => props.single && 'margin-left: auto'};\r\n`;\r\n\r\nButton.displayName = 'Button';\r\n\r\nconst ButtonGroup = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n`;\r\n\r\nfunction PageMenu({\r\n    tasks,\r\n    doneTasks,\r\n    removeTasks,\r\n    tasksManagement,\r\n    modes,\r\n    setEditingMode,\r\n    setAddingMode,\r\n    resetModes,\r\n    resetTasksManagement\r\n}) {\r\n    return (\r\n        <Navbar>\r\n            { tasks.length === 0\r\n                ? null\r\n                : (\r\n                    modes.edit\r\n                        ? <Button onClick={ () => { resetModes(); resetTasksManagement() }}>anuluj</Button> \r\n                        : <Button onClick={setEditingMode}>zarządzaj</Button>\r\n                )\r\n            }\r\n\r\n            { !modes.edit\r\n                ? <Button single={tasks.length === 0} onClick={setAddingMode}>dodaj</Button>\r\n                : (\r\n                    <ButtonGroup>\r\n                        { !tasks.some(task => tasksManagement.includes(task.id) && !task.done)\r\n                            ? null\r\n                            : (\r\n                                <Button onClick={() => {\r\n                                    doneTasks(tasksManagement);\r\n                                    resetModes();\r\n                                    resetTasksManagement();\r\n                                }}>\r\n                                    wykonaj\r\n                                </Button>\r\n                            ) \r\n                        }\r\n                        { tasksManagement.length === 0\r\n                            ? null\r\n                            : (\r\n                                <Button onClick={() => {\r\n                                    removeTasks(tasksManagement);\r\n                                    resetModes();\r\n                                    resetTasksManagement();\r\n                                }}>\r\n                                    usuń\r\n                                </Button>\r\n                            ) \r\n                        }\r\n                    </ButtonGroup>\r\n                )\r\n            }\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    tasks: state.tasks,\r\n    tasksManagement: state.tasksManagement,\r\n    modes: state.modes\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    removeTasks: (id) => dispatch(tasksActions.removeTask(id)),\r\n    doneTasks: (id) => dispatch(tasksActions.doneTask(id)),\r\n    setEditingMode: () => dispatch(modesActions.setEditingMode()),\r\n    setAddingMode: () => dispatch(modesActions.setAddingMode()),\r\n    resetModes: () => dispatch(modesActions.resetModes()),\r\n    resetTasksManagement: () => dispatch(tasksManagementActions.resetTasksManagement())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PageMenu);","export const randomInteger = (max, min = 0) => {\r\n    if (parseInt(max) !== Number(max)) {\r\n      return null;\r\n    }\r\n  \r\n    if (parseInt(min) !== Number(min)) {\r\n      return null;\r\n    }\r\n  \r\n    if (max === min) {\r\n      return max;\r\n    }\r\n  \r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","import styled from 'styled-components';\r\nimport { randomInteger } from '../../helpers/randomInteger';\r\n\r\nconst MessageText = styled.p`\r\n    margin-bottom: 2em;\r\n`;\r\n\r\nMessageText.displayName = 'Message';\r\n\r\nconst messages = [\r\n    'Brak zadań mój Panie.',\r\n    'Sir, lista zadań jest pusta!',\r\n    'Przed rozpoczęciem zadań należy zebrać myśli.',\r\n];\r\n\r\nfunction Message() {\r\n    const randomIndex = randomInteger(messages.length - 1);\r\n    const randomMessage = messages[randomIndex];\r\n\r\n    return <MessageText>{ randomMessage }</MessageText>;\r\n}\r\n\r\nexport default Message;\r\n","import styled from 'styled-components';\r\nimport { randomInteger } from '../../helpers/randomInteger';\r\n\r\nconst QuotationWrapper = styled.p`\r\n    text-align: justify;\r\n`;\r\n\r\nQuotationWrapper.displayName = 'QuotationWrapper';\r\n\r\nconst QuotationText = styled.q`\r\n    font-weight: 700;\r\n    line-height: 1.4em;\r\n`;\r\n\r\nQuotationText.displayName = 'Quotation';\r\n\r\nconst quotations = [\r\n    {\r\n        quotation: 'Jeśli ustawisz sobie cele absurdalnie wysoko i ich nie osiągniesz, to twoja „porażka” i tak będzie powyżej „sukcesu” innych ludzi.',\r\n        author: 'James Cameron'\r\n    },\r\n    {\r\n        quotation: 'Zawsze wydaje się, że coś jest niemożliwe, dopóki nie zostanie to zrobione.',\r\n        author: 'Nelson Mandela'\r\n    },\r\n    {\r\n        quotation: 'Sukces wymaga wcześniejszego przygotowania, bez niego z pewnością osiągniemy porażkę.',\r\n        author: 'Konfucjusz'\r\n    },\r\n    {\r\n        quotation: 'Wybierz jeden pomysł. Spraw, aby ten pomysł stał się Twoim życiem – myśl o nim, śnij o nim, żyj tym pomysłem. Pozwól mózgowi, mięśniom, nerwom, każdej części Twojego ciała napełnić się tym pomysłem i po prostu zostaw w spokoju wszystkie inne pomysły. To jest droga do sukcesu.',\r\n        author: 'Swami Vivekananda'\r\n    },\r\n    {\r\n        quotation: 'Wszelki postęp dzieje się poza strefą komfortu.',\r\n        author: 'Michael John Bobak'\r\n    },\r\n    {\r\n        quotation: 'Jeśli potrafisz o czymś marzyć, to potrafisz także tego dokonać.',\r\n        author: 'Walt Disney'\r\n    },\r\n    {\r\n        quotation: 'Jeśli nie stworzysz własnego planu na życie, prawdopodobnie znajdziesz się w planie kogoś innego. Zgadnij, co w nim dla Ciebie przygotowano? Nic specjalnego.',\r\n        author: 'Jim Rohn'\r\n    },\r\n    {\r\n        quotation: 'Aby osiągnąć sukces, musisz mądrze pracować, nigdy nie rezygnować – lecz przede wszystkim powinieneś pielęgnować swą wspaniałą obsesję.',\r\n        author: 'Walt Disney'\r\n    },\r\n    {\r\n        quotation: 'Żadne zadanie nie jest szczególnie trudne, jeśli podzielisz je na mniejsze podzadania.',\r\n        author: 'Henry Ford'\r\n    },\r\n    {\r\n        quotation: 'Nie bądź jednym z tych, którzy obawiając się niepowodzenia, niczego nie próbują.',\r\n        author: 'Thomas Metron'\r\n    },\r\n];\r\n\r\nfunction Quotation() {\r\n    const randomIndex = randomInteger(quotations.length - 1);\r\n    const { quotation, author = 'Autor Nieznany' } = quotations[randomIndex];\r\n\r\n    return (\r\n        <QuotationWrapper>\r\n            <QuotationText>{ quotation }</QuotationText>\r\n            {\" - \"}\r\n            <cite>{ author }</cite>\r\n        </QuotationWrapper>\r\n    );\r\n}\r\n\r\nexport default Quotation;\r\n","import styled from 'styled-components';\r\nimport Message from './Message';\r\nimport Quotation from './Quotation';\r\n\r\nconst MessageWelcomeWrapper = styled.div`\r\n    position: fixed;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    padding: 0 3em;\r\n    text-align: center;\r\n    /* display: flex; */\r\n    /* flex-direction: column;\r\n    align-items: center; */\r\n    /* justify-content: center; */\r\n`;\r\n\r\nMessageWelcomeWrapper.displayName = 'MessageWelcome';\r\n\r\nfunction MessageWelcome() {\r\n    return (\r\n        <MessageWelcomeWrapper>\r\n            <Message />\r\n            <Quotation />\r\n        </MessageWelcomeWrapper>\r\n    );\r\n}\r\n\r\nexport default MessageWelcome;\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport tasksManagementActions from '../../../store/tasksManagement/actions';\r\n\r\nconst CheckboxWrapper = styled.div`\r\n    margin-right: 20px;\r\n`;\r\n\r\nCheckboxWrapper.displayName = 'CheckboxWrapper';\r\n\r\nconst Label = styled.label`\r\n    width: 40px;\r\n    height: 40px;\r\n    border: 1px solid;\r\n    border-radius: 50%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    cursor: pointer;\r\n    border-color: ${props => props.isActive ? '#2979FF': 'lightgray'};\r\n\r\n    &:hover {\r\n        border-color: #2979FF;\r\n    }\r\n\r\n    &:after {\r\n        content: '';\r\n        display: block;\r\n        width: 20px;\r\n        height: 20px;\r\n        background-color: #2979FF;\r\n        border-radius: 50%;\r\n        transform: ${props => props.isActive ? 'scale(1)': 'scale(0)'};\r\n    }\r\n`;\r\n\r\nLabel.displayName = 'Label';\r\n\r\nconst CheckboxElement = styled.input`\r\n    display: none;\r\n`;\r\n\r\nCheckboxElement.displayName = 'Checkbox';\r\n\r\nclass Checkbox extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            isActive: false\r\n        }\r\n    }\r\n\r\n    toggleTasksManagementAndActive = () => {\r\n        const { task, toggleTasksManagement } = this.props;\r\n\r\n        toggleTasksManagement(task.id);\r\n\r\n        this.setState((state) => ({\r\n            isActive: !state.isActive\r\n        }));\r\n    }\r\n\r\n    componentDidUpdate = () => {\r\n        if (!this.props.modes.edit && this.state.isActive) {\r\n            this.setState({\r\n               isActive: false \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { task, modes, } = this.props;\r\n        const { isActive } = this.state;\r\n\r\n        return (\r\n            <CheckboxWrapper>\r\n                <CheckboxElement\r\n                    type=\"checkbox\"\r\n                    id={`task-${task.id}`}\r\n                    onClick={this.toggleTasksManagementAndActive}\r\n                />\r\n                <Label\r\n                    isActive={isActive && modes.edit}\r\n                    htmlFor={`task-${task.id}`}\r\n                ></Label>\r\n            </CheckboxWrapper>\r\n        )\r\n    }\r\n}\r\n\r\n// function Checkbox({ task, toggleTasksManagement }) {\r\n//     return (\r\n//         <CheckboxWrapper>\r\n//             <CheckboxElement\r\n//                 type=\"checkbox\"\r\n//                 id={`task-${task.id}`}\r\n//                 onClick={toggleTasksManagement(task.id)}\r\n//             />\r\n//             <Label htmlFor={`task-${task.id}`}></Label>\r\n//         </CheckboxWrapper>\r\n//     )\r\n// }\r\n\r\nconst mapStateToProps = (state) => ({\r\n    modes: state.modes\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    toggleTasksManagement: (id) => dispatch(tasksManagementActions.toggleTasksManagement(id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Checkbox);\r\n","import Moment from 'react-moment';\r\nimport styled from 'styled-components';\r\n\r\nconst ItemButton = styled.button`\r\n    width: 100%;\r\n    border: none;\r\n    padding: 12px 0;\r\n    text-align: left;\r\n    background-color: transparent;\r\n    cursor: pointer;\r\n`;\r\n\r\nItemButton.displayName = 'ItemButton';\r\n\r\nconst ItemContent = styled.p`\r\n    font-size: 16px;\r\n`;\r\n\r\nItemContent.displayName = 'ItemContent';\r\n\r\nconst ItemTime = styled.p`\r\n    color: #2979FF;\r\n    font-size: 12px;\r\n    margin-bottom: 7px;\r\n`;\r\n\r\nItemTime.displayName = 'ItemTime';\r\n\r\nfunction Data({ task, handleModalAndShowingMode }) {\r\n    return (\r\n        <ItemButton onClick={handleModalAndShowingMode}>\r\n            <ItemTime>\r\n                <Moment format=\"DD.MM.YYYY kk:mm\">{task.create}</Moment>\r\n            </ItemTime>\r\n            <ItemContent>{task.content}</ItemContent>\r\n        </ItemButton>\r\n    )\r\n}\r\n\r\nexport default Data;\r\n","import { Component } from 'react';\r\nimport Moment from 'react-moment';\r\nimport Modal from 'rodal';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\n\r\nimport tasksActions from '../../store/tasks/actions';\r\nimport modesActions from '../../store/modes/actions';\r\n\r\nimport 'rodal/lib/rodal.css';\r\n\r\nconst PopupContainer = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 100%;\r\n    grid-template-rows: auto auto 1fr auto;\r\n    height: 100%;\r\n    position: relative;\r\n`;\r\n\r\nconst PopupTitle = styled.h2`\r\n    font-size: 1.5rem;\r\n    text-align: center;\r\n    padding-bottom: 10px;\r\n    border-bottom: 1px solid #2979FF;\r\n`;\r\n\r\nconst PopupTime = styled(Moment)`\r\n    font-size: 0.9em;\r\n    text-align: center;\r\n    color: #2979FF;\r\n    margin-top: 10px;\r\n`;\r\n\r\nconst PopupDone = styled.div`\r\n    position: absolute;\r\n    right: 8px;\r\n    top: 10px;\r\n    transform: translateY(-50%);\r\n\r\n    &:before {\r\n        content: '';\r\n        display: block;\r\n        transform: rotate(45deg);\r\n        height: 26px;\r\n        width: 13px;\r\n        border-bottom: 2px solid #000;\r\n        border-right: 2px solid #000;\r\n    }\r\n`;\r\n\r\nconst PopupContent = styled.div`\r\n    font-size: 1.2em;\r\n    margin: 20px 0;\r\n    white-space: pre-wrap;\r\n    overflow: auto;\r\n`;\r\n\r\nconst PopupControl = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    font-size: 1rem;\r\n    font-weight: 700;\r\n    width: 100%;\r\n    padding: 10px 0;\r\n    cursor: pointer;\r\n    border: none;\r\n    border-radius: 10px;\r\n    margin-right: 5px;\r\n\r\n    &:last-child {\r\n        margin-right: 0;\r\n    }\r\n`;\r\n\r\nconst BtnCancle = styled(Button)`\r\n    background-color: #2979FF;\r\n    color: #FFF;\r\n\r\n    &:hover, &:focus {\r\n        background-color: #1E88E5\r\n    }\r\n`;\r\n\r\nconst BtnDone = styled(Button)`\r\n    background-color: #2E7D32;\r\n    color: #FFF;\r\n\r\n    &:hover, &:focus {\r\n        background-color: #388E3C\r\n    }\r\n`;\r\n\r\nconst BtnRemove = styled(Button)`\r\n    background-color: #FF3D00;\r\n    color: #FFF;\r\n\r\n    &:hover, &:focus {\r\n        background-color: #EF6000\r\n    }\r\n`;\r\n\r\nclass PopupAddTask extends Component {\r\n    closePopup = () => {\r\n        this.props.closeModalEvent();\r\n        this.props.resetModes();\r\n    }\r\n\r\n    doneTaskAndClosePopup = () => {\r\n        this.closePopup();\r\n        this.props.doneTask(this.props.task.id);\r\n    }\r\n\r\n    removeTaskAndClosePopup = () => {\r\n        this.closePopup();\r\n\r\n        setTimeout(() => {\r\n            this.props.removeTask(this.props.task.id);\r\n        }, 300);\r\n\r\n    }\r\n\r\n    render() {\r\n        const { task } = this.props;\r\n        return (\r\n            <Modal\r\n                visible={this.props.isOpen || false}\r\n                onClose={this.closePopup}\r\n                showCloseButton={false}\r\n                closeMaskOnClick={true}\r\n                customStyles={{\r\n                    width: '90vw',\r\n                    maxWidth: '450px',\r\n                    height: '90vh',\r\n                    borderRadius: '15px',\r\n                    padding: '15px'\r\n                }}\r\n                customMaskStyles={{\r\n                    backgroundColor: 'rgba(0, 0, 0, 0.8)'\r\n                }}\r\n            >\r\n                <PopupContainer>\r\n                    <PopupTitle>Zadanie</PopupTitle>\r\n                    {task.done && <PopupDone />}\r\n                    <PopupTime format=\"DD.MM.YYYY kk:mm\">{task.create}</PopupTime>\r\n                    <PopupContent>{task.content}</PopupContent>\r\n                    <PopupControl done={task.done}>\r\n                        <BtnCancle onClick={this.closePopup}>anuluj</BtnCancle>\r\n                        {task.done ? null : <BtnDone onClick={this.doneTaskAndClosePopup}>wykonaj</BtnDone>}\r\n                        <BtnRemove onClick={this.removeTaskAndClosePopup}>usuń</BtnRemove>\r\n                    </PopupControl>\r\n                </PopupContainer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    modes: state.modes.list\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    doneTask: (id) => dispatch(tasksActions.doneTask(id)),\r\n    removeTask: (id) => dispatch(tasksActions.removeTask(id)),\r\n    resetModes: () => dispatch(modesActions.resetModes())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PopupAddTask);","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport modesActions from '../../../store/modes/actions';\r\nimport tasksManagementActions from '../../../store/tasksManagement/actions';\r\nimport Checkbox from './Checkbox';\r\nimport Data from './Data';\r\nimport PopupShowingTask from '../../Popup/ShowingTask';\r\n\r\nconst ListItem = styled.li`\r\n    border-bottom: 1px solid lightgray;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    position: relative;\r\n    user-select: none;\r\n`;\r\n\r\nListItem.displayName = 'ListItem';\r\n\r\nconst ItemWrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    transition: transform 0.10s linear, width 0.10s linear;\r\n    overflow: hidden;\r\n\r\n    width: calc(100% + 60px);\r\n    transform: ${props => !props.edit ? 'translateX(-60px)' : 'translateX(0)'};\r\n`;\r\n\r\nItemWrapper.displayName = 'ItemWrapper';\r\n\r\nconst ItemDone = styled.div`\r\n    position: absolute;\r\n    right: 0;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    padding: 20px;\r\n    padding-right: 6px;\r\n    background-color: white;\r\n\r\n    &:before {\r\n        content: '';\r\n        display: block;\r\n        transform: rotate(45deg);\r\n        height: 20px;\r\n        width: 10px;\r\n        border-bottom: 2px solid #2979FF;\r\n        border-right: 2px solid #2979FF;\r\n    }\r\n`;\r\n\r\nItemDone.displayName = 'ItemDone';\r\n\r\nclass Item extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            openModal: false\r\n        }\r\n    }\r\n\r\n    changeOpenModal = () => {\r\n        this.props.resetTasksManagement();\r\n        this.setState(prevState => ({\r\n            openModal: !prevState.openModal\r\n        }));\r\n    }\r\n\r\n    handleModalAndShowingMode = () => {\r\n        this.changeOpenModal();\r\n        this.props.setShowingMode();\r\n    }\r\n\r\n    render() {\r\n        const { changeOpenModal, handleModalAndShowingMode, props, state } = this;\r\n        const { task, modes } = props;\r\n        const { openModal } = state;\r\n\r\n        return (\r\n            <ListItem>\r\n                <ItemWrapper edit={modes.edit} done={task.done}>\r\n                    <Checkbox task={task} />\r\n                    <Data handleModalAndShowingMode={handleModalAndShowingMode} task={task} />\r\n                </ItemWrapper>\r\n                {task.done && <ItemDone />}\r\n\r\n                <PopupShowingTask closeModalEvent={changeOpenModal} isOpen={openModal} task={task} />\r\n            </ListItem>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    modes: state.modes\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setShowingMode: () => dispatch(modesActions.setShowingMode()),\r\n    resetTasksManagement: () => dispatch(tasksManagementActions.resetTasksManagement())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Item);\r\n","import styled from 'styled-components';\r\n\r\nimport Item from './Item/Item';\r\n\r\nconst List = styled.ul`\r\n    list-style: none;\r\n    width: 100%;\r\n    padding: 60px 15px 50px;\r\n`;\r\n\r\nList.displayName = 'List';\r\n\r\nfunction Tasks({ tasks }) {\r\n    return (\r\n        <List>\r\n            { tasks.map(task => \r\n                <Item task={task} key={task.id} />\r\n            )}\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default Tasks;\r\n","import { connect } from 'react-redux';\r\n\r\nimport MessageWelcome from '../../MessageWelcome/MessageWelcome';\r\nimport Tasks from '../../Tasks/Tasks';\r\n\r\nfunction Content({ tasks }) {\r\n    if (tasks.length === 0) {\r\n        return <MessageWelcome />;\r\n    }\r\n\r\n    return <Tasks tasks={tasks} />;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.tasks.sort((a, b) => a.create < b.create)\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Content);\r\n","import styled from 'styled-components';\r\n\r\nconst PageTitle = styled.h1`\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    padding: 10px 20px;\r\n    background-color: white;\r\n    text-align: center;\r\n    border-bottom: 1px solid #d3d3d3;\r\n    z-index: 2;\r\n`;\r\n\r\nPageTitle.displayName = 'PageTitle';\r\n\r\nfunction Title() {\r\n    return <PageTitle>Lista zadań</PageTitle>\r\n}\r\n\r\nexport default Title;\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Modal from 'rodal';\r\nimport styled from 'styled-components';\r\n\r\nimport tasksActions from '../../store/tasks/actions';\r\nimport modesActions from '../../store/modes/actions';\r\n\r\nimport 'rodal/lib/rodal.css';\r\n\r\nconst PopupContainer = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 100%;\r\n    grid-template-rows: auto 1fr auto;\r\n    height: 100%;\r\n`;\r\n\r\nconst PopupTitle = styled.h2`\r\n    text-align: center;\r\n    font-size: 1.5rem;\r\n    padding-bottom: 10px;\r\n    border-bottom: 1px solid #2979FF;\r\n`;\r\n\r\nconst PopupFieldText = styled.textarea`\r\n    font-size: 1rem;\r\n    resize: none;\r\n    margin: 20px 0;\r\n    border: none;\r\n    overscroll-behavior: contain;\r\n`;\r\n\r\nconst PopupControl = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    font-size: 1rem;\r\n    font-weight: 700;\r\n    padding: 10px 0;\r\n    letter-spacing: 1px;\r\n    cursor: pointer;\r\n    color: #FFF;\r\n    border: none;\r\n    background-color: ${props => props.cancle ? '#2979FF' : '#2E7D32'};\r\n    border-radius: 10px;\r\n    width: calc(50% - 5px);\r\n\r\n    &:hover,\r\n    &:focus {\r\n        background-color: ${props => props.cancle ? '#1E88E5' : '#388E3C'};\r\n    }\r\n`;\r\n\r\nclass PopupAddTask extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            valueTextarea: ''\r\n        };\r\n    }\r\n\r\n    changeValue = (e) => {\r\n        this.setState({\r\n            valueTextarea: e.target.value\r\n        })\r\n    }\r\n\r\n    resetValue = () => {\r\n        this.setState({\r\n            valueTextarea: ''\r\n        })\r\n    }\r\n\r\n    closePopup = () => {\r\n        this.resetValue();\r\n        this.props.resetModes();\r\n    }\r\n\r\n    createTask = (e) => {\r\n        e.preventDefault();\r\n        if (this.state.valueTextarea.trim() !== '') {\r\n            this.props.addTask(this.state.valueTextarea.trim());\r\n            this.resetValue();\r\n            this.closePopup();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { closePopup, changeValue, createTask, props, state } = this;\r\n        const { modes } = props;\r\n        const { valueTextarea } = state;\r\n\r\n        return (\r\n            <Modal\r\n                visible={modes.add}\r\n                onClose={closePopup}\r\n                showCloseButton={false}\r\n                closeMaskOnClick={true}\r\n                customStyles={{\r\n                    width: '90vw',\r\n                    maxWidth: '450px',\r\n                    height: '90vh',\r\n                    borderRadius: '15px',\r\n                    padding: '15px'\r\n                }}\r\n                customMaskStyles={{\r\n                    backgroundColor: 'rgba(0, 0, 0, 0.8)'\r\n                }}\r\n            >\r\n                <PopupContainer>\r\n                    <PopupTitle>Dodawanie zadania</PopupTitle>\r\n                    <PopupFieldText\r\n                        value={valueTextarea}\r\n                        onChange={changeValue}\r\n                        placeholder='tutaj wpisz treść zadania'\r\n                    />\r\n                    <PopupControl>\r\n                        <Button onClick={closePopup} cancle>anuluj</Button>\r\n                        <Button onClick={createTask}>utwórz</Button>\r\n                    </PopupControl>\r\n                </PopupContainer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    modes: state.modes\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    addTask: (content) => dispatch(tasksActions.addTask(content)),\r\n    resetModes: () => dispatch(modesActions.resetModes())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PopupAddTask);","import Menu from './Menu/Menu';\r\nimport Content from './Content/Content';\r\nimport Title from './Title/Title';\r\nimport PopupAddingTask from '../Popup/AddingTask';\r\n\r\nfunction Page() {\r\n    return (\r\n        <>\r\n            <Title />\r\n            <Content />\r\n            <Menu />\r\n            <PopupAddingTask />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Page;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' }\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import { render } from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport store from './mainStore';\r\nimport Page from './components/Page/Page';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <Page />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.register();"],"sourceRoot":""}